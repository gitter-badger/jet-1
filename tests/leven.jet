#   For all i and j, d[i,j] will hold the Levenshtein distance between the     #
#   first "i" characters of "s" and the first "j" characters of "t".           #
#   Check details here: https://tinyurl.com/y857p2hf                       #
func levenstein(s:Text, t:Text) -> dist:Int
    var m = len(s)
    var n = len(t)
    var d[m,n] = 0 # this line looks like you are setting 1 elem at [m,n] to 0
    var d:Int[2D] = zeros2D([m, n]) # this is better regarding var decl
    # but zeros2D/3D/4D is a pain
    var myJunesData:Int[] = zeros([m, n]) # dynamic tensor
    var myJunesData:Int[Text] = zeros([m, n])
    var myJunesData:Int[3D]|kg.s = zeros([m, n])
    # var myJunesData::[Int|kg/s] = zeros([m, n])
# zeros is perfectly capable of returning any rank
    # tensor. its just a void* as far as C is concerned.

    d[:,1] = 1:m
    d[1,:] = 1:n

    for j = 1:n
        for i = 1:m
            var cost = num(s[i] != t[j])
            d[i, j] = min([ d[i-1, j  ] + 1,          # deletion
                            d[i,   j-1] + 1,          # insertion
                            d[i-1, j-1] + cost])      # substitution
        end i
    end j

    dist = d[m,n]
    print("Distance between '$s' and '$t' is: $dist")

    check 0<= dist <=min([m, n])
end func


func main()
    levenstein("KITTEN", "SITTING")
    levenstein("JUMBO", "DUMBO")
    levenstein("NUMBER_OF_TIME_STEPS", "NUBER_OF_TIME_STEP")
    levenstein("PROBLEM_NAME", "PRUBLEM_NAME")
    check status in [0:255]
end