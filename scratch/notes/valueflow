
x = ask() # x :: [-inf inf]
print(1/x) # error if 0 in x

if x != 0
    # here x != 0 is true, so remove 0. x :: [-inf -1], [1 inf]
    print(1/x) # no issue, 0 is not in x
else
    # here x == 0, so x :: [0 0]
    print(x)
end if

check x > 5
# now x must be > 5, or the program would've exited
so clip x :: [6 inf]


# note x = random(1:6, 9:12) # [1 6] ++ [9 12]
# note x = random(1:6) + random(9:12) # [1 6] + [9 12]  = [10 18]
x = random(1:6)
# splitting into child scopes
if a
    x = 3 # [3 3]
else if b
    # inherit parent's last state of x :: [1 6]
    x += 4 # [5 10]
    if f
        x += 3 # [8 13]
    else
        x -= 3 # [2 7]
    end if
    # ([5 10]++ [8 13]++ [2 7]) -> [2 13]
else
    x = 3+sin(x) # [2 4]
    # since sin(x) ensures result within [0 1]
end if
# merging back into parent scope:
# you don't have to include the state as it was before splitting, because
# the child scopes took care of it. just add the states at the end of each
# subscope.
[3 3] ++ [2 13] ++ [2 4] -> [2 13]

- List(Interval(Int)) on every ASTVar.

add an Interval
remove an Interval
check if number is within Interval list
[5 10] ++ [8 13] = ([5 10], [8 13]) -> coalesce = [5 13]
but [5 10] ++ [13 15] = ([5 10], [13 15])











-----------



var s = "The thirty {{brown}} jones who did"
char s[128] OR *s = palloc(...)
sprintf(s,)
