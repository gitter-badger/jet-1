# composition

type Type
	var sup as Base
    var i as Int
end type
function fun(ar as Type) := fun(ar.sup)
function print(ar as Type) := print('i: $ar.i')
function mutate(ar! as Type, val as Int)
    ar.i = val
end function

fun(inst)
print(inst)
mutate(inst!, val=5)

# w methods
type Type
	var sup as Base
    var i as Int
    method fun() := sup.fun()
    method print() := print('i: $i')
    method mutate(val as Int)
        # ISSUE: where are you going to mark the mutator??
        # ISSUE: locality is violated as `self` is coming out of thin air
        i = val
    end method
    # can access members without `self`, but mutators will be detected
end type
inst.fun()
inst.print()
inst!.mutate(5)
inst!.mutate(val=5)
inst!mutate(5)
inst!mutate(val=5)

# subclassing
type Type extends Base
    var i as Int
end type
# super(..) is an implicit knowledge now, although not as bad as coming out of nowhere
# function fun(ar as Type) := fun(super(ar)) # this is implied if subclassing
function print(ar as Type) := print('i: $ar.i')
function mutate(ar! as Type, val as Int)
    ar.i = val
    # ISSUE: what if i was in the base class, can you touch it? I guess yes as
    # you can do it in the other scenarios too. If you have access control then
    # the private vs protected business comes into play.
end function

# w methods
type Type extends Base
    var i as Int
    #ISSUE again super out of nowhere
    # method fun() := super.fun() # you dont need this
    method print() := print('i: $i')
    method mutate(val as Int)
        _i = val
    end
    get i := _i
    set i(val as Int)
        _i = val
    end
end

type Expr
    var kind as TokenKinds
    union va as Var, expr as Expr, fun as Function
    union ty as TypeInfo, allypeInfo as Int
    group elemental, canEval, didEval as Boolean
end
NOOOOOOO but if you want analysis need this

# How about being able to bind funcs to types (but only as statics !)
# This makes code crystal clear to read even if a bit verbose. You dont have to
# write it like this all the time, just call the func if you know it and the linter
# will do the rest.
Type.fun(ar as Type) := Base.fun(ar.sup)
var s = String.split("what is this", sep=" ")
# maybe too verbose

# BTW get/set

# type Type
# # you can write NO NO NO
#     prop st as String
#     # linter will make it
#     var ~st as String
#     get st := ~st
#     set st(value as String)
#         ~st = value
#     end set
# end type

# to create a R/O var; use
get name as String
# which automatically creates a var _name and a `get_name` function.
# this implies
get name as String := _name
# in other words
get name as String
    return _name
end
# where ~ is to be seen as an operator that gives back the storage associated with name
# it can be used to retrieve the storage of other private vars too? or not? better not
# NO NEED TO DO THAT. just use the name to refer to the backing storage. get cannot be
# recursive and neither can set be recursive, so they cannot call the function `name` but
# refer to the variable `name`. Actually there is no function `name`, it is `get_name` and
# `set_name`.
set name(value as String)
    _name = value
end set


# 2 scenarios. common: no writing across modules
# lean: no methods, no subclassing, but events
type Type
    var m as Int
    event changed() # this is just: var changed as Function(...)
end type
function onChanged()
    ...
end function
var t = Type {
    .changed = onChanged }
function fun(self as Type)
    ...
    self.changed(...) # -> encourages ppl to use events to get . notation
end function
# basically funcs are statically resolved, events are dynamic resolved (virtual funcs)

# xojo style: methods, subclassing, events, event handlers
type Class
    var m as Int
    event changed()
    method fun()
        ...
        changed(...) # just call the event to raise; access class membs directly
    end method
end type
var c = Class {
    .changed = onChanged
}

# swift style: no events stuff, just override methods. events are methods.
type Class
    var m as Int
    method changed()
        ...
    end method
end type

type GClass extends Class
    var cc as Int
    method changed() # <- overrides
        ... # can you access m directly? yes. is that good? nope
    end method
end type
# but this is just lean style if you take methods out!! NOOO it wont work w/o
# polymorphism. how will your overridden func get called?
# thats why you need event which is basically a per-instance func ptr. then
# funcs are not overridable at all.



-----

main() handles all the app setup, it is like AppController or whatever your NSApp subclass is called
it will typically do

...
var wMain as Window = ui.load('MainWindow.ui') # should match the FML ID of root node
show(wMain)
...

or maybe you need a guiMain function that becomes the AppController.setupMainWindow function.
Or how about a convention: the default window is --NAH this is like implicit instance
Better call guiMain from within NSApplication.applicationWillFinishLaunching
So I guess you need to have a console main and a gui guiMain (rename it?)
In the guiMain you basically ui.load() the Window and show it.

MainWindow.ui contains the FML UI hierarchy.
MainWindow.jet contains the event handlers for everything in MainWindow.ui.
When you call show(wMain), this raises the event Window setup() implemented in MainWindow.jet
event wMain setup() # this wMain is defined in the FML as window #wMain ...
    ...
end event
These files are in gui/, at the same level as modules/ or programs/.
how about custom controls. lets say e.g. I want my own NodeView.
NodeView.ui is in gui/ and has a root node of View instead of Window.
if there are any subviews within the view then they are here as well.
NodeView.jet has the type NodeView and a var super as View and overridden events etc.
and it also has the event definitions for everything in NodeView.ui.
It looks like you made a ContainerControl,
or like ContainerControl is actually just a View with subviews...
How about View being root node of all .ui files?

another idea. how about an import gui command like this (in main.jet)
import gui MainWindow -> this reads MainWindow.ui and MainWindow.jet
it autogenerates a type MainWindow that contains member vars which are ids
read from the .ui file.
If you have this import command, you dont need any ui.load() stuff, you just do
var wMain = MainWindow() # make as many as you want
show(wMain)

wMain now has all controls inside it, e.g. wMain.txText and so on. These
are then 'referencing outlets' (see Xcode) to the actual controls (impl in code, not nib)
how about disallowing an ID for the root element? Then you can name it in the
source file.

by now you have realized that gui names should be Capitalized bcz they are types.

***
I really like Xcodes bindings (Cocoa bindings?) bind values, font, enabled,
visible etc etc. to actual vars even from NSUserDefaults.
***

enum MyUDKeys
    userName
    userEmail
    userAccountID
end enum
# as you know each enum by default generates internal ints and a string array of names.
UserDefaults should accept an enum somehow, and then you can use the enum keys instead of
using raw strings for user defaults keys.

var user as UserDefaults<MyUDKeys> -> ???

var user as UserDefaults

Why would a user use this UserDefaults instead of writing his own UserSettings
type and serialising it with a 1-liner?
