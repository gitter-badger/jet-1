
type KEpsilon extends MomentumTransport
    var kCmu as DimScalar = 0.09
    var kC1 as DimScalar = 1.44
    var kC2 as DimScalar = 1.92
    var kC3 as DimScalar = 0
    var sigmak as DimScalar = 1
    var sigmaEps as DimScalar = 1.3
    get k as VolScalarField =
        IOobject("k", mesh, IOOptions.mustRead, IOOptions.autoWrite)
    get eps as VolScalarField =
        IOobject("eps", mesh, IOOptions.mustRead, IOOptions.autoWrite)
    var nut as VolScalarField =
        IOobject("nut", mesh, IOOptions.mustRead, IOOptions.autoWrite)

    get dKEff := nut/sigmak + nu #- Return the effective diffusivity for k
    get dEpsilonEff := nut/sigmaEps + nu #- Return the effective diffusivity for eps
    # k(self) := k #- Return the turbulence kinetic energy
    # eps(self) := eps #- Return the turbulence kinetic energy dissipation rate

    method correctNut()
        nut = kCmu * k^2 / eps
        nut!.correctBoundaryConditions().correct(FVOptions(mesh))
    end method

    get kSource = FVScalarMatrix(field=k,
        dimVolume * dimensions(rho) * dimensions(k)/dimTime)

    # TODO: you may want some kind of runtime units support. How about a func
    # units that returns a repr (maybe a 7-tuple od dims) of the dims on a var?
    var u = Units(k  *  1|m3  *  1|m2/s2 / 1|s)

    get epsilonSource = FVScalarMatrix(field=eps,
        dimVolume * dimensions(rho) * dimensions(eps)/dimTime)

    method KEpsilon() result (self as KEpsilon)
        bound(k!, kMin)
        bound(eps!, epsilonMin)
        printCoeffs(self, type)
    end method



    method read()
        if eddyViscosity!.read()
            kCmu!.readIfPresent(coeffDict)
            kC1!.readIfPresent(coeffDict)
            kC2!.readIfPresent(coeffDict)
            kC3!.readIfPresent(coeffDict)
            sigmak!.readIfPresent(coeffDict)
            sigmaEps!.readIfPresent(coeffDict)
            return yes
        else
            return no
        end if
    end method


    # template<BasicMomentumTransportModel>
    method correct()
        if not turbulence then return

        # Local references
        # const alphaField& alpha = alpha_
        # const rhoField& rho = rho
        # const surfaceScalarField& alphaRhoPhi = alphaRhoPhi_
        # const volVectorField& U = U_
        # volScalarField& nut = nut
        var fvOptions = FVOptions(mesh)

        eddyViscosity!.correct()

        volScalarField.Internal divU
        (
            fvc.div(fvc.absolute(phi(self), U))()
        )

        tmp<volTensorField> tgradU = fvc.grad(U)
        volScalarField.Internal gG
        (
            GName(self),
            nut  * (dev(twoSymm(tgradU.v)) && tgradU.v)
        )
        tgradU!.clear()

        # Update eps and gG at the wall
        eps!.boundaryField.updateCoeffs()

        # Dissipation equation
        var epsEqn as FVScalarMatrix = (
            fvm.ddt(alpha, rho, eps)
            + fvm.div(alphaRhoPhi, eps)
            - fvm.laplacian(alpha * rho * dEpsilonEff(), eps)
            == kC1 * alpha * rho * gG * eps/k
            - fvm.SuSp((2/3 * kC1 - kC3) * alpha * rho * divU, eps)
            - fvm.Sp(kC2 * alpha * rho * eps/k, eps)
            + epsilonSource(self)
            + fvOptions(alpha, rho, eps)
        )

        epsEqn!.relax()
        epsEqn!.constrain(fvOptions)
        epsEqn!.boundaryManipulate(boundaryFieldRef(eps))
        epsEqn!.solve()
        eps!.correct(fvOptions)
        eps!.bound(epsilonMin)

        epsEqn!.relax().constrain(fvOptions).
            boundaryManipulate(eps.boundaryField).solve()

        epsEqn!.
            relax().
            constrain(fvOptions).
            boundaryManipulate(eps.boundaryField).
            solve()

        eps!.correct(fvOptions).bound(epsilonMin)

        # Turbulent kinetic energy equation
        var kEqn as FVScalarMatrix = (
            fvm.ddt(alpha, rho, k)
            + fvm.div(alphaRhoPhi, k)
            - fvm.laplacian(alpha * rho * dKEff(), k)
            == alpha * rho * gG
            - fvm.SuSp(2/3 * alpha * rho * divU, k)
            - fvm.Sp(alpha * rho * eps/k, k)
            + kSource(self)
            + fvOptions(alpha, rho, k) )

        kEqn!.relax()
        kEqn!.constrain(fvOptions)
        kEqn!.solve()
        k!.correct(fvOptions)
        k!.bound(kMin)

        kEqn!.
            relax().
            constrain(fvOptions).
            solve()

        kEqn!.relax().constrain(fvOptions).solve()
        k!.correct(fvOptions).bound(kMin)

        self!.correctNut()
    end method
end type