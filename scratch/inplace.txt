--- actual fortran func shows good candidate for inplacing

 function lower(istr)
        character(len=*) istr
        character(len=len(istr)) lower --- automatic array (kind of C VLA)
        character lcase(26), ucase(26)
        integer j,n,jj

        data lcase /"a","b","c","d","e","f","g","h","i","j","k","l","m", &
            "n","o","p","q","r","s","t","u","v","w","x","y","z"/
        data ucase /"A","B","C","D","E","F","G","H","I","J","K","L","M", &
            "N","O","P","Q","R","S","T","U","V","W","X","Y","Z"/

        lower = " " --- huh.. this is basically one space followed by \0
        lower = istr --- this is a copy of len(istr) bytes
        jj = len(istr)
        do j = 1, jj
            do n = 1,26 --- come on, use ascii(istr[j])-49, or in C istr[j]-49. no loop
                if (istr(j:j) == ucase(n)) lower(j:j) = lcase(n) --- this is a classic inplaceable elementwise assignment.
                --- if lower was an arg (and returned) caller could send in the same arg as input and have it banged in place. no alloc.
                --- assuming the function can work in place (i.e. no array deps) AND the var can be banged in place (not used later).
            end do
        end do
    end function


