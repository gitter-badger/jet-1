   # Model coefficients
type KEpsilon
    var visc as MomentumTransport
    var mesh as Mesh3D

    var kCmu as DimScalar = 0.09
    var kC1 as DimScalar = 1.44
    var kC2 as DimScalar = 1.92
    var kC3 as DimScalar = 0
    var sigmak as DimScalar = 1
    var sigmaEps as DimScalar = 1.3
    get k as VolScalarField =
        IOobject("k", self.mesh, IOOptions.mustRead, IOOptions.autoWrite)
    get eps as VolScalarField =
        IOobject("eps", self.mesh, IOOptions.mustRead, IOOptions.autoWrite)
    var nut as VolScalarField =
        IOobject("nut", self.mesh, IOOptions.mustRead, IOOptions.autoWrite)
end type

dKEff(self as KEpsilon) := self.nut/self.sigmak + self.visc.nu #- Return the effective diffusivity for k
dEpsilonEff(self as KEpsilon) := self.nut/self.sigmaEps + self.visc.nu #- Return the effective diffusivity for eps
# k(self) := self.k #- Return the turbulence kinetic energy
# eps(self) := self.eps #- Return the turbulence kinetic energy dissipation rate

function correctNut(self! as KEpsilon)
    self.nut[] = self.kCmu * self.k[]^2 / self.eps[]
    correctBoundaryConditions(self.nut!)
    correct(self.nut!, FVOptions(self.mesh))
    correct(correctBoundaryConditions(self.nut!), FVOptions(self.mesh))
end function

kSource(self) := FVScalarMatrix(field=k,
    dimVolume * dimensions(self.rho) * dimensions(k)/dimTime)

# TODO: you may want some kind of runtime units support. How about a func
# units that returns a repr (maybe a 7-tuple od dims) of the dims on a var?
var u = Units(k * 1|m3 * 1|m2/s2 / 1|s)

epsilonSource(self) := FVScalarMatrix(field=eps,
    dimVolume * dimensions(self.rho) * dimensions(eps)/dimTime)

function KEpsilon() result (self as KEpsilon)
    bound(self.k!, self.kMin)
    bound(self.eps!, self.epsilonMin)
    printCoeffs(self, type)
end function



function read(self! as KEpsilon)
    if read(self.eddyViscosity!)
        readIfPresent(kCmu, self.coeffDict)
        readIfPresent(kC1, self.coeffDict)
        readIfPresent(kC2, self.coeffDict)
        readIfPresent(kC3, self.coeffDict)
        readIfPresent(sigmak, self.coeffDict)
        readIfPresent(sigmaEps, self.coeffDict)
        return yes
    else
        return no
    end if
end function


# template<BasicMomentumTransportModel>
function correct(self! as KEpsilon)
    if self.turbulent == no then return

    # Local references
    # const alphaField& alpha = self.alpha_
    # const rhoField& rho = self.rho
    # const surfaceScalarField& alphaRhoPhi = self.alphaRhoPhi_
    # const volVectorField& U = self.U_
    # volScalarField& nut = self.nut
    var fvOptions = FVOptions(self.mesh)

    correct(self.eddyViscosity!)

    volScalarField.Internal divU
    (
        fvc.div(fvc.absolute(phi(self), U))()
    )

    tmp<volTensorField> tgradU = fvc.grad(U)
    volScalarField.Internal gG
    (
        GName(self),
        nut  * (dev(twoSymm(tgradU.v)) && tgradU.v)
    )
    clear(tgradU!)

    # Update eps and gG at the wall
    updateCoeffs(boundaryFieldRef(eps))

    # Dissipation equation
    var epsEqn as FVScalarMatrix = (
        fvm.ddt(alpha, rho, eps)
      + fvm.div(alphaRhoPhi, eps)
      - fvm.laplacian(alpha * rho * dEpsilonEff(), eps)
     == kC1 * alpha * rho * gG * eps/k
      - fvm.SuSp((2/3 * kC1 - kC3) * alpha * rho * divU, eps)
      - fvm.Sp(kC2 * alpha * rho * eps/k, eps)
      + epsilonSource(self)
      + fvOptions(alpha, rho, eps)
    )

    relax(epsEqn!)
    constrain(epsEqn!, options=fvOptions)
    boundaryManipulate(epsEqn!, boundaryFieldRef(eps))
    solve(epsEqn!)
    correct(eps!, options=fvOptions)
    bound(eps!, limit=self.epsilonMin)

    # Turbulent kinetic energy equation
    var kEqn as FVScalarMatrix = (
        fvm.ddt(alpha, rho, k)
      + fvm.div(alphaRhoPhi, k)
      - fvm.laplacian(alpha * rho * dKEff(), k)
     == alpha * rho * gG
      - fvm.SuSp(2/3 * alpha * rho * divU, k)
      - fvm.Sp(alpha * rho * eps/k, k)
      + kSource(self)
      + fvOptions(alpha, rho, k) )

    # relax(kEqn!)
    # constrain(kEqn!, options=fvOptions)
    # solve(kEqn!)
    solve(constrain(relax(kEqn!), options=fvOptions))
    # kEqn = solve(constrain(relax(kEqn), options=fvOptions))

    # correct(k!, options=fvOptions)
    # bound(k!, limit=self.kMin)
    bound(correct(k!, options=fvOptions), limit=self.kMin)

    correctNut(self!)
end function


   # Model coefficients
