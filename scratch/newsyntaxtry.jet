





# functions return last expr i.e. implicit unused value of expr goes into result
square(x) -> x^2

longer(x) ->
    if x<5
    then x^2
    else x^3

longer(x) ->
    x<5 ?
    x^2 :
    x^3

testing(x) ->
    write("value of x is $x")
    json(x)
    check 1.2142 < x < 4

# type annotations
(Real, Real -> Real) min(x, y) -> if x < y then x else y
(Real|kg.s/m2, Real[2D] -> Real[Text]) jigf(x, arr) -> {"res" = arr[1,3]}


Real, Real -> Real
min(x, y) ->
    if x < y then x else y

Real|kg.s/m2, Real[2D] -> Real[Text]
jigf(x, arr) -> {
    "res" = arr[1,3]
}

# specifying a function signature as a type (for function pointers)
Integrator = ReFunc, Real, Real -> Real

(Integrator) leftRect(f, x, h) -> f(x)
(Integrator) midRect(f, x, h) ->  f(x + h/2)
(Integrator) rightRect(f, x, h) -> f(x + h)
(Integrator) trapezium(f, x, h) -> (f(x) + f(x+h)) / 2
(Integrator) simpson(f, x, h) -> (f(x) + 4*f(x+h/2) + f(x+h)) / 6
