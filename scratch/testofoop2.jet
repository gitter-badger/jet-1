import fvm, fvc, fvo.opts, solvers

type KEpsilon
    var visc as MomentumTransport
    var mesh as Mesh3D
    set mesh(value as Mesh3D)
        mesh = value
        mesh!.updateCoeffs()
    end set

    var kCmu as DimScalar = 0.09
    var kC1 as DimScalar = 1.44
    var kC2 as DimScalar = 1.92
    var kC3 as DimScalar = 0
    var sigmak as DimScalar = 1
    var sigmaEps as DimScalar = 1.3
    var nut as VolScalarField = IOobject("nut", mesh, IOOptions.mustRead, IOOptions.autoWrite)

    # var & func are private, only get & set are public!

    get k() := IOobject("k", mesh, IOOptions.mustRead, IOOptions.autoWrite)
    get eps() := IOobject("eps", mesh, IOOptions.mustRead, IOOptions.autoWrite)
    get dKEff() := nut/sigmak + visc.nu #- Return the effective diffusivity for k
    get dEpsilonEff() := nut/sigmaEps + visc.nu #- Return the effective diffusivity for eps
    get kSource() := FVScalarMatrix(field=k,
        dimVolume * dimensions(rho) * dimensions(k)/dimTime)
    get epsilonSource() := FVScalarMatrix(field=eps,
        dimVolume * dimensions(rho) * dimensions(eps)/dimTime)

    # there are no gets only sets. So the name cannot conflict
    # wait there are gets...
    set mesh(value as Mesh3D)
        mesh = value
        mesh!.updateCoeffs()
    end set

    # there are no gets only sets. So the name cannot conflict
    assign mesh(value as Mesh3D)
        mesh = value
        mesh!.updateCoeffs()
    end assign

    func correctNut()
        nut = kCmu * k^2 / eps
        nut!.correctBoundaryConditions().correct(FVOptions(mesh))
    end func

    # TODO: you may want some kind of runtime units support. How about a func
    # units that returns a repr (maybe a 7-tuple od dims) of the dims on a var?
    var u = Units(k * 1|m3 * 1|m2/s2 / 1|s)


    func init()
        k!.bound(kMin)
        eps!.bound(epsilonMin)
        printCoeffs(self, type)
    end func

    func read()
        if visc!.read()
            kCmu!.readIfPresent(coeffDict)
            kC1!.readIfPresent(coeffDict)
            kC2!.readIfPresent(coeffDict)
            kC3!.readIfPresent(coeffDict)
            sigmak!.readIfPresent(coeffDict)
            sigmaEps!.readIfPresent(coeffDict)
            return yes
        else
            return no
        end if
    end func

    # template<BasicMomentumTransportModel>
    func correct()
        if isTurbulent == no then return
        # dont allow implicit boolean conditions e.g. if not isTurbulent then ...

        # Local references
        # const alphaField& alpha = alpha_
        # const rhoField& rho = rho
        # const surfaceScalarField& alphaRhoPhi = alphaRhoPhi_
        # const volVectorField& U = U_
        # volScalarField& nut = nut
        var fvOptions = FVOptions(mesh)

        &visc.correct()

        volScalarField.Internal divU
        (
            fvc.div(fvc.absolute(phi(self), U))()
        )

        var gradU = fvc.grad(U)
        volScalarField.Internal gG
        (
            GName(self),
            nut  * (dev(twoSymm(gradU.v)) and tgradU.v)
        )

        # Update eps and gG at the wall
        eps!.boundaryField.updateCoeffs()

        # Dissipation equation
        var epsEqn = FVScalarMatrix(
            fvm.ddt(alpha, rho, eps) + fvm.div(alphaRhoPhi, eps)
            - fvm.laplacian(alpha * rho * dEpsilonEff(), eps)
            == kC1 * alpha * rho * gG * eps/k
            - fvm.SuSp((2/3 * kC1 - kC3) * alpha * rho * divU, eps)
            - fvm.Sp(kC2 * alpha * rho * eps/k, eps)
            + epsilonSource(self)
            + fvOptions(alpha, rho, eps) )

        epsEqn!.relax().constrain(fvOptions).
            boundaryManipulate(eps.boundaryField).solve()

        eps!.correct(fvOptions).bound(epsilonMin)

        # Turbulent kinetic energy equation
        var kEqn as FVScalarMatrix =
            fvm.ddt(alpha, rho, k) +
            fvm.div(alphaRhoPhi, k!) -
            fvm.laplacian(alpha * rho * dKEff(), k!) -
            alpha * rho * gG -
            fvm.SuSp(2/3 * alpha * rho * divU, k!) -
            fvm.Sp(alpha * rho * eps/k, k!) +
            kSource(self) +
            fvOptions(alpha, rho, k!)

        # if you scalarize this it becomes elemwise add/sub of 8 matrices

        # far better cache utilisation if you just do one at a time
        # then you don't even need all 8 terms in one go, eval them one by one
        # and reuse the buffer for the next
        var kEqn as FVScalarMatrix = 0
        kEqn += fvm.ddt(alpha, rho, k)
        kEqn += fvm.div(alphaRhoPhi, k!)
        kEqn -= fvm.laplacian(alpha * rho * dKEff(), k!)
        kEqn -= alpha * rho * gG
        kEqn -= fvm.SuSp(2/3 * alpha * rho * divU, k!)
        kEqn -= fvm.Sp(alpha * rho * eps/k, k!)
        kEqn += kSource(self)
        kEqn += fvOptions(alpha, rho, k!)
        # should convert x = a + b + c - d - e ... into
        # x = a; x += b; x += c; x -= d; x -= e ...
        # because a, b, c, d, e... may be expensive in space and splitting
        # and promoting can help reuse buffers

        # this is why you need to promote all func calls out so that you can
        # drop stuff as soon as it is done with.
        _1 = fvm.ddt(alpha, rho, k)
        kEqn += _1
        # --- drop _1
        _2 = fvm.div(alphaRhoPhi, k!) # will reuse buffer from _1!!!
        kEqn += _2
        # --- drop _2
        # and so on. In fact if the +,-,etc overload could drop the rparam (unless it is an lvalue)
        # then this can happen even with a single a + b + c + d + e expr. But its then the users job
        # to manage memory (and to know if something is lvalue/rvalue), that goes against the design.

        # I like the idea of splitting + - * / and then promoting all func calls. Basically splitting
        # the arith ops means you are promoting them. How to eliminate temporaries?

        # *** PROMOTE nearly everything EXCEPT lvalues!!
        # if you promote in tree order, things work out well:
        var x = a + f(b) + g(h)
        _1 = f(b)          | f(b, _1)
        _2 = add(a, _1)    | add(a, _1, _2) # in 2nd form, _2 is either _1 or clone(_1)
        # a -> lvalue not promoted
        drop(_1)
        _3 = g(h)          | g(h, _3)
        x = add(_2, _3)    | add(_2, _3, x)
        drop(_2)
        drop(_3)
        # here at one point you have up to 2 temporaries.
        # if one of the params is an rvalue it can be inplaced (IF THE FUNC CAN INPLACE...)
        # this means the ASTVar.inplaceable flag for an rvalue is ALWAYS true. (for a var
        # it is true if the var is no longer used after the current statement). Now if the func
        # can inplce, like add can, and any one of the params is inplaceable (rvalue, or last usage of lvalue)
        # it should go into param1 so that it can be overwritten.
        # BTW escape analysis should always be false for vars starting with _
        #----
        # I think splitting them using -= and += and so on is a better idea
        # because it generates only 1 tmp var instead of 2
        var x = a
        x += f(b)
        x += g(h)
        # and so
        var x = a
        _1 = f(b)
        add(x, _1)
        drop(_1)
        _2 = g(h)
        add(x, _2)
        drop(_2)
        # *** SO YOU HAVE TO REPLACE ARITH TREE WITH SUCCESSIVE ARITH OPS.
        # -----
        # lets see with funcs:
        var x = f(y, g(h, m(z)))
        # becomes
        _1 = m(z)      | m(z, _1)
        _2 = g(h, _1)  | g(h, _1, _2)
        drop(_1)
        x = f(y, _2)   | f(y, _2, x)
        drop(_2)
        # you can only assume that none of the funcs can inplace.
        # if g can inplace, then it becomes _1 = g(_1, h) (swap the lvalue)

        # why not write all ops in triad form for C?
        add(a, b, ret)

        # -----------
        # BTW unless a getter is simple (i.e. returns an internal var) exprs like
        # b.f(a)[3] should be warned against: tell the user to take out b.f(a) as a
        # var and then index it with [3]. Maybe make it an error.

        kEqn = kEqn.relax().constrain(fvOptions).solve()
        kEqn .= relax().constrain(fvOptions).solve()
        k = k.solve(kEqn)
        k .= solve(kEqn)
        k!.correct(fvOptions).bound(min=kMin)
        k .= correct(fvOptions).bound(min=kMin)

        self!.correctNut()
    end func
end type
