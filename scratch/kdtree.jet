
let nPointsPerLeaf = 24  # MIN(2^nDIMS, 8)
let nDIMS = 3

type KDTreeNode
    Int isleaf  # GET THIS OUT HOWEVER
    Real threshold[nDIMS]  # [D] # leaves dont hav thresholdsnot
    # union {
    # assuming constant n
    var child[n] as KDTreeNode # means KDTreeNode child[n]; impossible in C
    ref child[] as ref KDTreeNode # means KDTreeNode** child;
    var child[n] as ref KDTreeNode # means KDTreeNode* child[n];
    # but I want
    ref child[n] as KDTreeNode # to mean KDTreeNode* child[n];
    var child[n] as KDTreeNode
    # if you are referencing an array, the size must be known at the time of referencing the array. Need not be ctconst but it should be known
    # so var means, create a variable that is STORED "HERE".
    # ref means create a reference (that is stored here, but that is inconsequential) and points to something STORED ELSEWHERE
    # struct KDTreePoint* points[nPointsPerLeaf]
    # }
end

# or let's follow C.
# all types are value types unless ref'd
# all arrays are contiguously laid value types unless ref'd

# i still think it is possible to decide by READING THE WHOLE PROGRAM
# which refs should be T** or *T[] or whatever. This depends on whether the vars
# are assigned to, resized, and other factors.
# there is then basically ONLY ONE WAY to write it:
var pts[] as KDTreePoint # this is T** since no size specified neither here nor in a later resize. In a func body the resize is an option, not in a type decl
var pts[nDims] as KDTreePoint
var child[] as KDTreeNode # without any assignment, it will most likely be T**. If inside own type, it cannot be embedded anyway
var child[nDims] as KDTreeNode # now it MIGHT be *T[nDims] if nDims is known (constexpr), if child is not reassigned or resized, yada yada
# regardless of this, function args are always passed by ref (non-primitives).

var str[len(txt)] as Byte = myText

# if yo ucan work with the assumption that assignments do not intend a copy, then
# anything that is assigned to (unless its a primtive) should be geenerated as a ref.
# so where ... is any NON-PRIMITIVE value
node.child[i] = ... # child is an array of ptrs.
node.child = ... # child is itself a ptr. (to an array of ptrs) THIS IS NOT IN THIS CODE
# so child is embedded in the type with the determined size. Now if there is no size then you either complain or generate it as T** (suboptimal, or is it?)
node.points[i] = ... # points is an array of ptrs.
node.points = ... # points is itself a ptr. (...) THIS IS NOT IN THIS CODE
# so points is embedded in the containing type


# if you init a type member (ie assign) with a ctconst size and it is the same size in all
# inits across the code then warn that the init should be put in the type decl itself.

# if the type memb is initd in the type decl and you init with the same ctconst size in a func then warn

type KDTreePointsHolder
    var isleaf, npoints  # GET THIS OUT HOWEVER
    var points[nPointsPerLeaf] as KDTreePoint
end

type KDTreePoint
    # Real x[nDIMS]  # [D]
    var x[] as Real = zeros(nDIMS) # if size can be determined at compile time, AND array has not been resized or reassigned, generate it as array
    # embed x[] as Real = zeros(nDIMS) # now nDims must be compile time known
end

# for cases where the dims is really not known at compile time, there is no way but to generate the stuff as T** intead of *T[N]. So the current system works if you don't set a size using zeros() or resize() or similar, then the type must come out as T**. Besides, the user will have to assign to this var in his init routines, which means the var will be marked as assigeed and will generate to T** anyway. The user can make things go faster by specifying the size at compile time, in this respect we are close to C then.

# all sorts of warnings can be shown for conflicting cases anyway.

MKSTAT(KDTreeNode)
MKSTAT(KDTreePoint)
MKSTAT(KDTreePointsHolder)

# Real squared(Real x) { return x * x  }
Real distanceFunction(KDTreePoint* p, KDTreePoint* p2)
{
    Real sum = 0
    for i = 1:nDIMS do sum += (p.x[i] - p2.x[i])^2
    return sum
}

# #define HASDIR(dir, which) dir << which
void addPoint(KDTreeNode* node, KDTreePoint* point)
{
    Int dird[nDIMS], direction = 0
    for i = 1:nDIMS do dird[i] = (point.x[i] >= node.threshold[i])*2^i # << i
    # boolean to pow of 2 means [0 or 1] to pow of 2 --> can  be replaced by
    # (v) << n where v is the boolean and n is the power

    # dird[i] tells you whether the ith-coordinate of the point is below or
    # above (or if you prefer, to the left or right of) the ith-coordinate of
    # the node's threshold. You need to check all dimensions and find out how
    # the comparison goes (individually). In a simple binary tree this is like
    # deciding whether the new value should go to the left or to the right
    # child, but to avoid branching here it goes to child[0] or child[1], and
    # the 0 or 1 comes from the comparison result. node.child is actually
    # effectively node.child[][][] ... i.e. as many []s as the dimensionality.
    # However writing it explicitly as a multi-dim array makes things difficult
    # for a truly generic version, so I'm going to write it as a normal array
    # and calculate the overall (flat) index. this N-dimensional access of the
    # form arr[l1][l2][l3] is effectively l1*4 + l2*2 + l3 ... and so on for
    # higher dimensions, where l's are either 0 or 1. so it can be reduced to
    # bitwise ops: the *s can be done with << and adding them together is a |.
    for i = 1:nDIMS do direction += dird[i]  # JUST PUT THIS IN THE ABOVE LOOP
    # direction is now the overall index of the "correct" child to follow.

    # now 3 things can happen: (1) the child doesn't exist, (2) it does
    # and is a KDTreeNode, (3) it does and is a leaf (it has KDTreePoint[]).
    # Descend until just before you hit a leaf or NULL.
    KDTreeNode* parent = NULL
    while (node.child[direction] and not node.child[direction].isleaf) {
        parent = node
        node = node.child[direction]
        # direction = (point.x >= node.threshold)
        direction = 0
        for i = 1:nDIMS do dird[i] = (point.x[i] >= node.threshold[i]) *2^i
        for i = 1:nDIMS do direction += dird[i]
    }

    # now the child is either NULL or a leaf (i.e. has points)
    if (not node.child[direction]) {
        node.child[direction] = KDTreePointsHolder()
        # calloc(1, sizeof(KDTreePointsHolder))
        node.child[direction].isleaf = 1
    }

    # now the child must be a leaf
    KDTreePointsHolder*
    ref child => node.child[direction]

    if (child.npoints == nPointsPerLeaf) {
        # the array of points in this leaf is full. the leaf should now be
        # converted into a node and the nPointsPerLeaf points of this ex-leaf
        # should be re-added into this node so so they can go one level deeper
        # in the tree at the right spots.
        # KDTreePointsHolder* tmpPoints = child
        var points[] as KDTreePoint = copy(child.points)
        # memcpy(points, child.points, sizeof(KDTreePoint*) * nPointsPerLeaf)

        #        child.isleaf = 0  # no longer a leaf.
        #        child.npoints = 0  # don't need it here, its not a leaf
        #        bzero(child.points, sizeof(KDTreePoint*) * nPointsPerLeaf)
        # *child = (KDTreeNode) {}
        var newChild = KDTreeNode()  # calloc(1, sizeof(KDTreeNode))
        node.child[direction] = newChild
        # NOT A LEAFnot  A NEW NODE
        # wipe the points, the space will be used
        # for child node ptrs now

        # and you know that there are nPointsPerLeaf points anyway.

        # you have to add 2 grandchildren here (actually 2^NDIMS). Don't leave
        # them at NULL. Set them as leaves.
        # TODO: figure out how to only create child.child[direction] and not
        # all 2^nDIMS children here
        # for (
        # Int i = direction # i == direction /*2^nDIMS*/  i++) {
        # for (Int i = 0  i < 2^nDIMS  i++) {
        # THIS BUSINESS IS TO AVOID FREEING THE OLD POINTSHOLDER SO IT CAN
        # BE REUSED
        # *child = (KDTreePointsHolder) {}
        wipe(child!);
        newChild.child[direction] = child
        # calloc(1, sizeof(KDTreeNode))
        newChild.child[direction].isleaf = yes  # already set
        # }

        for i = 1:nDIMS # you need the midpoints of the new grandkids.
            # they depend on the midpoint of the child, and the midpoint of the
            # parent (i.e. two levels up the ancestry). For these you first
            # need 3 (not ) "limits", the lo/mid/hi limits.
            Real thmid = node.threshold[i]
            Real thlo, thhi
            if node.threshold[i] >= parent.threshold[i]
                thlo = parent.threshold[i]
                thhi = 2 * node.threshold[i] - parent.threshold[i]
            else
                thlo = 2 * node.threshold[i] - parent.threshold[i]
                thhi = parent.threshold[i]
            end

            if not dird[i]
                newChild.threshold[i] = (thmid + thlo) / 2
            else
                newChild.threshold[i] = (thhi + thmid) / 2
            end
        end

        # Now you see if the grandkid is increasing or decreasing compared to
        # the child (the grandkid's parent). Again you have to do this for all
        # grandchildren, regardless of whether they have any points (yet).
        #        for (Int gdirection = 0  gdirection < 2  gdirection++)
        #            # for (Int i=0 i<2^NDIMS i++) for (Int j=0 j<NDIMS j++)
        #            gdird[j] =
        #            # i & 1<<j  gdirection |= ...
        #            if (gdirection)
        #                child.child[gdirection].threshold = (thhi - thmid)
        #                / 2
        #            else
        #                child.child[gdirection].threshold = (thmid - thlo)
        #                / 2

        # now that the thresholds are set, add the cached points
        for ip = 1:nPointsPerLeaf do add(newChild!, point=points[ip])

        add(node!, point=point)  # need 1 level to compute the new
        #        centroids in case all 8 points from previous clustered into
        #        the same grandchild
        return
        # parent = node
        # node = child
        # child = child.child[direction]
        # direction = 0
        # for i = 1:nDIMS do dird[i] = (point.x[i] >= node.threshold[i]) << i
        # for i = 1:nDIMS do direction |= dird[i]

        #        if (child.npoints==8)
        #        return
    end # TODO: what to do if npoints was somehow set to > nPointsPerLeaf?
    # else
    # NOW finally add the point.
    # you have a array of nPointsPerLeaf items, but deleting leaves
    # holes. So add will have to loop and find an open hole to plug the new
    # point in. its probably better than rearranging the array on delete,
    # because when nPointsPerLeaf is small the array is in cache anyway,
    # but writing to it will access DRAM.
    # child.points[child.npoints++] = point

    for i = 1:nPointsPerLeaf #(Int i = 0  i < nPointsPerLeaf  i++) {
        if not child.points[i]
            child.points[i] = point
            child.npoints+=1
            break
        end
    end
end

void removePoint(KDTreeNode* node, KDTreePoint* point) { }

# always init  with this func with a known number of levels and a bounding box
# this way you have a node hierarchy ready and your add calls will not thrash
# adding subnodes and moving points down over and over.
# KDTreeNode* init(Int levels, KDTreePoint* boundBox[2]) { }

# BTW for jet do you want to allow function xyz(arr[2]) etc. and then check
# at callsites if passed array has exactly 2 (or 2 or more) provably?

KDTreePoint* getNearestPoint(KDTreeNode* node, KDTreePoint* point)
{
    # TODO: PROBLEMnot not not  HERE you descend into the finest octant/quadrnt and
    # check only those points. The actual nearest point may be in an adjacent
    # quadrantnot  So you should go up 1 level than the finest, or 2?

    # here as opposed to add, you descend all the way down to the leaf.
    while (node and not node.isleaf) {
        Int direction = 0, dird[nDIMS]
        for i = 1:nDIMS do dird[i] = (point.x[i] >= node.threshold[i]) << i
        for i = 1:nDIMS do direction |= dird[i]
        node = node.child[direction]
    }
    # actually you shouldn't expect to find a NULL leaf here.
    Int minIndex = 0
    Real mindist = 1e300
    if (not node) return NULL
    KDTreePointsHolder* holder = node
    for (Int i = 0  i < holder.npoints  i++) {
        Real dist = distanceFunction(holder.points[i], point)
        if (dist < mindist) {
            minIndex = i
            mindist = dist
        }
    }
    # a point is always returned. you asked for the near*est* point, and there
    # is always one, regardless of how near or far it is exactly.
    # THATS NOT TRUEnot not not not not
    # MAYBE: pass mindist back to the caller to save a repeated
    # distanceFunction call.
    return holder.points[minIndex]
}
# KDTreePoint points[] = { { 1 }, { 3 }, { -5 } }

#define countof(x) (sizeof(x) / sizeof(x[0]))
const char* const spc = "                                            "
const Int levStep = 2
void printPoint(KDTreePoint* p, Int lev)
{
    printf("%.*s(", lev, spc)
    for i = 1:nDIMS do { printf("%s%g", i ? ", " : "", p.x[i])  }
    puts(")")
}

void printNode(KDTreeNode* node, Int lev)
{
    if (node.isleaf) {
        printf("[\n")  #,node.npoints )
        KDTreePointsHolder* holder = node

        forto(j, holder.npoints)
        {
            printPoint(holder.points[j], lev + levStep)
        }
        printf("%.*s]\n", lev, spc)
    } else {
        printf("%.*s<", 0 * lev, spc)
        for i = 1:nDIMS do { printf("%s%g", i ? ", " : "", node.threshold[i])  }
        printf("> {\n")
        forto(i, 2^nDIMS)
        {
            if (node.child[i]) {
                printf("%.*s%d: ", lev + levStep, spc, i)
                printNode(node.child[i], lev + levStep)
            } else {
                # printf("%.*schild[%d] NULL\n", lev, spc,i)
            }
        }
        printf("%.*s}\n", lev, spc)
    }
}

void printDotRec(FILE* f, KDTreeNode* node)
{
    forto(i, 2^nDIMS)
    {
        Int dird[nDIMS]
        forto(j, nDIMS) dird[j] = i & (1 << j)

        if (node.child[i]) {
            if (node.child[i].isleaf) {
                KDTreePointsHolder* holder = node.child[i]

                fprintf(f,
                    "\"Node\\n<%g, %g, %g>\" . \"Points[%d]\\n\\n",
                    node.threshold[0], node.threshold[1], node.threshold[2],
                    holder.npoints)
                forto(j, holder.npoints)
                {
                    KDTreePoint* point = holder.points[j]
                    fprintf(f, "(%g, %g, %g)\\n", point.x[0], point.x[1],
                        point.x[2])
                }
                fprintf(f, "\" [label=\"[%d]\\n", i)
                forto(j, nDIMS) fprintf(f, "%c", dird[j] ? '>' : '<')
                fprintf(f, "\"]\n")
            } else {
                fprintf(f,
                    "\"Node\\n<%g, %g, %g>\" . \"Node\\n<%g, %g, %g>\" "
                    "[label=\"[%d]\\n",
                    node.threshold[0], node.threshold[1], node.threshold[2],
                    node.child[i].threshold[0], node.child[i].threshold[1],
                    node.child[i].threshold[2], i)
                forto(j, nDIMS) fprintf(f, "%c", dird[j] ? '>' : '<')
                fprintf(f, "\"]\n")

                printDotRec(f, node.child[i])
            }
        }
    }
}

void printDot(KDTreeNode* node)
{
    FILE* f = fopen("kdt.dot", "w")
    fputs(
        "digraph {\nnode [fontname=\"Miriam Libre\"]  edge [fontname=\"Miriam "
        "Libre\"] \n",
        f)
    printDotRec(f, node)
    fputs("}\n", f)
    fclose(f)
}

KDTreePoint gPoints[] = { { -5 }, { -4 }, { -3 }, { -2 }, { 6 },
    { -5.35 }, { -4.35 }, { -3.35 }, { -2.4545 }, { 1.45 }, { -5.3578 },
    { -4.6789 }, { -3.8679 }, { -2.5557 }, { -1.6767 }, { -5.10354225 },
    { -4.035 }, { -3.3335 }, { -2.45 }, { -1.04455 } }

KDTreePoint gPoints[] = {
    { -0, -2, 3 }, #
    { -0, 1, 4 }, #
    { -0, 2, -4 }, #
    { -0, 5, -2 }, #
    { -1, -2, -3 }, #
    { -1, -3, 4 }, #
    { -1, -5, -2 }, #
    { -1, 3, 3.5 }, #
    { -1, 3, 3.9 }, #
    { -1, 3, 3.6 }, #
    { -1, 3, 4.18 }, #
    { -1, 3, 4 }, #
    { -1, 3, 4.3 }, #
    { -1, 3, 3 }, #
    { -1, 3, 4.27 }, #
    { -1, 3, 4 }, #
    { -2, -1, -3 }, #
    { -2, -3, -4 }, #
    { -2, -3, 1 }, #
    { -2, 1, 0 }, #
    { -2, 2, -3 }, #
    { -2, 3, -2 }, #
    { -3, -1, -4 }, #
    { -3, -1, 4 }, #
    { -3, -2, 1 }, #
    { -3, -3, 3 }, #
    { -3, -4, 3 }, #
    { -3, 2, -2 }, #
    { -3, 2, -4 }, #
    { -3, 3, 0 }, #
    { -3, 4, -4 }, #
    { -3, 5, -5 }, #
    { -3, 5, 4 }, #
    { -4, -1, 1 }, #
    { -4, -3, -0 }, #
    { -4, -3, 2 }, #
    { -4, -3, 5 }, #
    { -4, -4, -0 }, #
    { -4, -5, 4 }, #
    { -4, 0, -4 }, #
    { -4, 1, -5 }, #
    { -4, 4, 0 }, #
    { -4, 5, -3 }, #
    { -5, -0, -4 }, #
    { 0, -4, -2 }, #
    { 0, 0, 0 }, #
    { 0, 2, -4 }, #
    { 0, 3, -2 }, #
    { 0, 3, 1 }, #
    { 0, 5, -2 }, #
    { 1, -0, 1 }, #
    { 1, -1, 2 }, #
    { 1, -2, 3 }, #
    { 1, -3, -3 }, #
    { 1, -3, 1 }, #
    { 1, -3, 2 }, #
    { 1, -5, -1 }, #
    { 1, 2, -2 }, #
    { 1, 3, -3 }, #
    { 1, 3, -4 }, #
    { 2, -0, -0 }, #
    { 2, -0, -3 }, #
    { 2, -1, 2 }, #
    { 2, -1, 3 }, #
    { 2, -2, 2 }, #
    { 2, -3, 4 }, #
    { 2, -4, 3 }, #
    { 2, 0, -5 }, #
    { 2, 1, -5 }, #
    { 2, 2, -2 }, #
    { 2, 2, 1 }, #
    { 2, 2, 5 }, #
    { 2, 3, 4 }, #
    { 2, 4, 5 }, #
    { 3, -1, 3 }, #
    { 3, -2, -2 }, #
    { 3, -2, -3 }, #
    { 3, 0, 3 }, #
    { 3, 1, 3 }, #
    { 3, 2, -4 }, #
    { 3, 4, -3 }, #
    { 3, 4, -4 }, #
    { 3, 5, 4 }, #
    { 4, -0, -3 }, #
    { 4, -1, 2 }, #
    { 4, -1, 4 }, #
    { 4, -2, -4 }, #
    { 4, -2, 0 }, #
    { 4, 1, -1 }, #
    { 4, 1, 2 }, #
    { 4, 2, -4 }, #
    { 4, 3, 5 }, #
    { 4, 4, 4 }, #
    { 5, -4, 0 }, #
    { 5, -4, 4 }, #
    { 5, 1, 2 }, #
    { 5, 1, 4 }, #
    { 5, 4, -4 } #
}

KDTreePoint* linsearch(KDTreePoint points[], KDTreePoint* point)
{
    Int minIndex = 0
    Real mindist = 1e300
    for i = 1:len(points)
    {
        Real dist = distanceFunction(points[i], point)
        if (dist < mindist) {
            minIndex = i
            mindist = dist
        }
    }
    return points[minIndex]
}
# random in the range of -6 to 6
Real rndf()
{
    return ((Int)(rand() / (0.0012 * RANDMAX))) / 100.0 - 6
}
KDTreePoint* newPoint(Real x, Real y, Real z)
{
    KDTreePoint* p = malloc(sizeof(KDTreePoint))
    *p = (KDTreePoint) { { x, y, z } }
    return p
}
#include "../modules/jetsystime.h"

# addLevels can only be called on a node which has 1 further level below it
# already. This is because you need 1 node above the current level in order to
# compute the threshold for the new nodes to be added at a new level.
void addLevels(KDTreeNode* parent, Int levels)
{
    forto(k, 2^nDIMS)
    {
        KDTreeNode* root = parent.child[k]
        forto(i, 2^nDIMS) if (not root.child[i])
        {
            root.child[i] = calloc(1, sizeof(KDTreeNode))
            KDTreeNode* child = root.child[i]

            Int dird[nDIMS]
            forto(j, nDIMS) dird[j] = i & (1 << j)
            forto(j, nDIMS)
            {
                # KDTreeNode* parent = parentL
                Real thmid = root.threshold[j]
                Real thlo, thhi
                if (root.threshold[j] >= parent.threshold[j]) {
                    thlo = parent.threshold[j]
                    thhi = 2 * root.threshold[j] - parent.threshold[j]
                } else {
                    thlo = 2 * root.threshold[j] - parent.threshold[j]
                    thhi = parent.threshold[j]
                }

                if (not dird[j])
                    child.threshold[j] = (thmid + thlo) / 2
                else
                    child.threshold[j] = (thhi + thmid) / 2
            }
        }
        if (levels) addLevels(root, levels - 1)
    }
}

KDTreeNode* init(KDTreePoint boundBox[2], Int sizeGuess)
{
    # create a fake parent (PARENT OF ROOT, TEMPORARY) with threshold at
    # one of the corners of the bounding box.
    KDTreeNode parentL[] = { {} }
    forto(j, nDIMS) parentL.threshold[j] = boundBox[0].x[j]
    KDTreeNode parentR[] = { {} }
    forto(j, nDIMS) parentR.threshold[j] = boundBox[1].x[j]

    # The actual root node that will be returned.
    KDTreeNode* root = KDTreeNode()  # calloc(1, sizeof(KDTreeNode))
    Int levels = log2(sizeGuess)
    if (levels < 1) levels = 1
    forto(j, nDIMS) root.threshold[j]
        = (boundBox[0].x[j] + boundBox[1].x[j]) / 2.0
    forto(i, 2^nDIMS)
    {
        root.child[i] = KDTreeNode()  # calloc(1, sizeof(KDTreeNode))
        KDTreeNode* child = root.child[i]

        Int dird[nDIMS]
        forto(j, nDIMS) dird[j] = i & (1 << j)
        forto(j, nDIMS)
        {
            KDTreeNode* parent = parentL
            Real thmid = root.threshold[j]
            Real thlo, thhi
            if (root.threshold[j] >= parent.threshold[j]) {
                thlo = parent.threshold[j]
                thhi = 2 * root.threshold[j] - parent.threshold[j]
            } else {
                thlo = 2 * root.threshold[j] - parent.threshold[j]
                thhi = parent.threshold[j]
            }

            if (not dird[j])
                child.threshold[j] = (thmid + thlo) / 2
            else
                child.threshold[j] = (thhi + thmid) / 2
        }

        # KDTreePoint mid
        # forto(j, nDIMS) mid[j] = ...
        # forto(j, nDIMS) root.child[i].threshold[j] = mid.x[j]
    }
    # if (levels > 1)
    # addLevels(root, 3)  # benchmarked  this doesn't help
    return root
}

Int main(Int argc, char* argv[])
{
    srand(time(0))
    # KDTreeNode root[] = { { .threshold = { 0 } } }
    # KDTreeNode rc1[] = { { .threshold = { -3, -3, -3 } } }
    # KDTreeNode rc2[] = { { .threshold = { 3, -3, -3 } } }
    # KDTreeNode rc3[] = { { .threshold = { -3, 3, -3 } } }
    # KDTreeNode rc4[] = { { .threshold = { 3, 3, -3 } } }
    # KDTreeNode rc5[] = { { .threshold = { -3, -3, 3 } } }
    # KDTreeNode rc6[] = { { .threshold = { 3, -3, 3 } } }
    # KDTreeNode rc7[] = { { .threshold = { -3, 3, 3 } } }
    # KDTreeNode rc8[] = { { .threshold = { 3, 3, 3 } } }

    # root.child[0] = rc1
    # root.child[1] = rc2
    # root.child[2] = rc3
    # root.child[3] = rc4
    # root.child[4] = rc5
    # root.child[5] = rc6
    # root.child[6] = rc7
    # root.child[7] = rc8

    var boundBox[] as KDTreePoint = [
        { .x = [ -6, -6, -6 ] },
        { .x = [  6,  6,  6 ] }
    ]

    # for (Int i = 0  i < countof(gPoints)  i++) { addPoint(root, gPoints +
    # i)
    # }
    const Int NPTS = argc > 1 ? atoi(argv[1]) : 10000000
    jetsystimeTime t0 = jetsystimegetTime()
    KDTreeNode* root = init(boundBox, NPTS)
    # printDot(root)
    # return 0
    printf("init: %g ms\n", jetsystimeclockSpanMicro(t0) / 1e3)

    # KDTreePoint* pt = malloc(sizeof(KDTreePoint) * NPTS)
    var pt[] as KDTreePoint # starts with zero
    resize(pt!, to=nPTS)

    # t0 = jetsystimegetTime()
    var tt|ms = Stopwatch()
    for i = 1:nPTS
        for j = 1:nDIMS
            pt[i].x[j] = random(-6, 6)
        end
    end

    # forto(i, NPTS) pt[i] = (KDTreePoint) { { rndf(), rndf(), rndf() } }

    printf("%d rndgen+mallocs etc: %g ms\n", NPTS,
        jetsystimeclockSpanMicro(t0) / 1e3)
    t0 = jetsystimegetTime()

    # TODO: preallocate log2(NPTS/nPointsPerLeaf) nodes, assuming
    # uniformly distributed points that should be OK
    var t0|ms = Stopwatch()
    for i = 1:nPTS do add(root!, point=pt[i])
    print('add $nPTS pts: $t0 ms')
    # printf("add %d pts: %g ms\n", NPTS, jetsystimeclockSpanMicro(t0) / 1e3)

    # printNode(root, 0)
    # printDot(root)
    KDTreePoint ptest[] = { { -3.14159 } }
    t0 = jetsystimegetTime()


    var st|us = Stopwatch()
    var nea as KDTreePoint? = lookupNearest(root, point=ptest)
    print('lookup: $st us')

    if nea
        print(nea)
    else
        print("no match for: ")
        print(ptest)
    end

    t0 = jetsystimegetTime()
    printPoint(linsearch(pt, NPTS, ptest), 0)
    printf("linsearch: %g us\n", jetsystimeclockSpanNano(t0) / 1e3)
    printf("total calloc %zu B (%d), malloc %zu B (%d)\n", totCallocB,
        totCalloc, totMallocB, totMalloc)
}
