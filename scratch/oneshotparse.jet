parsing in 1 char-by-char loop over the input string.
there is no tokenization stage, chars are pushed on the parse stack and folded
when you hit a non-alnum etc.

in a sense you have inlined the tokenizer call, but there are improvements also
from no more lookahead, and can now have 1 large switch where more or less
all chars are involved, so it is a jump table (DIY to be sure).
so actually it is the other way around, more like you have inlined the PARSER,
into the token advance call. may as well quit C and write asm exclusively.

let input = "for x = 1:23+5 if print('hi') "

var str = readfile("source.jet")
for c in str
col++
nl: line++, col=0
whitespace:
    trample
    if not inString then foldtop
\w: push
\0: foldtop

foldtop ->
by default the top on the stack is a byte sequence.
until you trample something it is a non-null term seq,
when you trample it becomes a usable string.
fold means determine what that top string is (keyw, lit, etc)
and fold it into 1 node (NOT token!).


trample -> write nullchar and continue