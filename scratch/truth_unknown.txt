& y n ?
y y n ?
n n n n
? ? n ?

| y n ?
y y y y
n y n ?
? y ? ?

~ y n ?
  n y !

^ y n ?
y n y ?
n y n ?
? ? ? ?

!: opposite of a particular ?
? & ! = n
? | ! = y
~? = !
~! = ?
? ^ ! = y
? ^ itself = n

define one: a general ^(1...n) that is true if exactly 1 of the n props is true
define any, all, one funcs

cmd:
prop -- eval prop
arr[1:45] = yes -- set array values to true
or prop = no -- set prop to false
or arr[1:3] = no -- set array values to false
or prop = idk -- set prop to unknown (remove from dict)
or prop = expr -- define prop as expr (define function)
or :prop -- print defn of prop
-- funcs dont take params. define the proper vars first then call the func
-- there are no vars holding eval results. call funcs repeatedly.
prop: \w+

expr:
prop
or prop [&^|] expr
or !<expr>