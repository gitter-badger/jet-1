"The quick brown fox jumps over the lazy dog."

"The quick brown fox jumps over the lazy dog."

var animal1 = "fox"
var animal2 = "dog"
var verb = "jumps over"
"The quick brown $animal1 $verb the lazy $animal2."
"The quick brown {{animal1}} {{verb}} the lazy {{animal2}}."
"The quick brown ",animal1," ",verb," the lazy ",animal2,"."
"%s%s%s%s%s%s%s"

# since we have to generate 2 strings anyway (tty/non-tty) it makes
# sense to design the tags as you see fit, not encumbered by the
# need to fit the ANSI codes in-situ.
^[40m
{+hR}
"{fr}RED{/}{bG}GREEN"
"{fr}"
"{*b}{*i}{*u}{*s}{*d}{*h}"
^[30m
{+cR}

^[40;1m
{+bR**}

^[38;5;212m
{+c256:212}

^[48;5;212m
{+h}

^[4m
{+b}
{+i}
{+u}
{+s}

^[0m
{--}

# every {{ -> add the format spec of the variable's type
# very }} -> add %s
# trample all {{ to ", and }} to ,"
"The quick {bw/}brown{-} $animal1.name $verb the lazy $animal2."
"The quick {bw/}brown{-} {{animal1}}:5.3f {{verb}} the lazy {{animal2}}."
"The quick ",  "brown"," ",animal1," ",verb," the lazy ",animal2,"."
"%s\e[91m\e[41m\e[7m%s\e[m%s%s%s%s%s"

define FGBLUE "\e[91m"
... BGWHITE "\e[41m"
... ITALIC "\e[7m"
... RESET "\e[0m"
print_str("The quick ")
if (tty) print_str(FGBLUE BGWHITE ITALIC)
print_str("brown")
if (tty) print_str(RESET)
print_str(" ")
print_str(animal1)
print_str(" ")
print_str(verb)
print_str(" ")
print_str(" the lazy ")
print_str(animal2)
print_str(".")

# format str for format str. basically "%s" repeated.
# send it to sprintf with ("%s","\e[41m","%s",...) -> format str.
# why sprintf just printf it!
# print format str. trample original str & print.
var animal = "dog"
"The quick brown fox jumps over the lazy $animal."

"The quick brown fox jumps over the lazy {{animal}}."

fg    fgbr     bg    bgbr  fgr   bgr
{+r    {+R    {-r    {-R    +}   -}  # red
{+g    {+G    {-g    {-G    +}   -}  # green
{+b    {+B    {-b    {-B    +}   -}  # blue
{+c    {+C    {-c    {-C    +}   -}  # cyan
{+m    {+M    {-m    {-M    +}   -}  # magenta
{+y    {+Y    {-y    {-Y    +}   -}  # yellow
{+k    {+K    {-k    {-K    +}   -}  # black
{+w    {+W    {-w    {-W    +}   -}  # white

bold "{* ... *}"
italic "{/ ... /}"
underline "{_ ... _}"
strike "{~ ... ~}"


"{br,fk}{{BlackOnRed}}{-}"

# fg: foreground, fgbr: foreground bright, fgr: foreground reset
# bg: background, bgbr: background bright, bgr: background reset

# each of these becomes a %s or %-s, and an arg is pushed corresponding to whatever is needed