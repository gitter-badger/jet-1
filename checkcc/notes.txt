
#pragma mark - Heap Allocation Extras

// Generally this is not to be done at runtime. But for now we can use it as
// a lightweight and builtin alternative to valgrind. Later focus on getting
// codegen right so that no leaks are possible.

// Use the ch- functions, if you use plain malloc nothing will be tracked.
/*
 #ifdef CHMALLOC
 #define chfree(ptr) f_chfree(ptr, __FILE__, __LINE__, __func__)
 #define chmalloc(size) f_chmalloc(size, __FILE__, __LINE__, __func__)
 #define chcalloc(size, count) f_chcalloc(size,count, __FILE__, __LINE__,
 __func__) #define chrealloc(ptr, size) f_chrealloc(ptr, size, __FILE__,
 __LINE__, __func__) #else #define chfree(ptr) free(ptr) #define
 chmalloc(size) malloc(size) #define chcalloc(size, count)
 calloc(size,count) #define chrealloc(ptr, size) realloc(ptr, size) #endif

 void f_chfree(void* ptr, const char* file, int line, const char* func)
 {
 if (not ad_size.has(ptr)) {
 eprintf("freeing unknown ptr in '%s' at %s line %d\n", func,
 file, line); return;
 }
 aD_file.del(ptr);
 ad_func.del(ptr);
 ad_line.del(ptr);
 ad_size.del(ptr);
 free(ptr);
 }

 void* f_chmalloc(size_t size, const char* file, int line, const char* func
 )
 {
 void* ret = malloc(size);
 if (not ret) {
 eprintf("malloc failed in '%s' at %s line %d\n", func, file,
 line); return NULL;
 }
 aD_file[ptr] = fname;
 ad_func[ptr] = func;
 ad_line[ptr] = line;
 ad_size[ptr] = size;
 }
 */

// delimiter

/*
 #pragma mark - Number Types

 template <class T>
 class Dual {
 T x, dx;
 };
 template <class T>
 class Complex {
 T re, im;
 };
 template <class T>
 class Reciprocal {
 // this can be 4B/8B, all others r pairs will be 8B/16B
 T d;
 };
 template <class T>
 class Rational {
 T n, d;
 };
 template <class T>
 class Interval {
 T hi, lo;
 };
 template <class T>
 class Point {
 T x, y;
 };
 template <class T>
 class Size {
 T w, h;
 };
 union Number {
 float f;
 uint32_t u;
 int32_t d;
 Reciprocal<float> rf;
 Reciprocal<uint32_t> ru;
 Reciprocal<int32_t> rd;
 };
 static_assert(sizeof(Number) == 4, "");

 union NumberL {
 double F;
 uint64_t U;
 int64_t D;
 Reciprocal<double> rF;
 Reciprocal<uint64_t> rU;
 Reciprocal<int64_t> rD;
 };
 static_assert(sizeof(NumberL) == 8, "");

// TODO: need ASTEnum
//
// AS A RULE
// Nothing except Parser should allocate any memory.
// if you need new strings, Parser should have anticipated that in advance
// at its init and strdup'd them ready for use (e.g. variations of module
// names). If you use a single pool for everything, free parsers manually
// when done. OR have one pool for Parser and one for everything else. This
// way Parser will have its destructors auto called and since it is the only
// one that needs destructors to be called, this will get rid of the memory
// leaks. as a bonus, all AST objects can store a 2-byte index of the
// associated parser in the Parser pool, and store offsets to strings
// instead of char*. if bringing down ASTExpr to 16KB can help, consider
// having a separate pool only for ASTExpr, then left/right ptrs are 32-bit
// indexes into this pool.
//
//----------
// LINTER should work only on TOKENS! No need to build a tree for that.
// Right now however the linter generates the AST and dumps it back. This is
// more to understand and debug the AST generation -- the production linter
// should not do AST gen.
// NOTE that you need to generate AST for linting to do things like:
// - auto annotate var types when not obvious and remove when obvious
// - auto add function argument names at call sites / remove the first
// - change |kg/s[:,:] or [:,:]|kg/s into Number[:,:]|kg/s
// - sort imports
// - remove extra parentheses in exprs
// - fix array ranges :: -> :, 1:-1:1 -> :, ::::7::::9:: -> error
// - move types and their member functions together
// since files are expected to be small this ast-based linter should be OK?
// keep modules limited to 2000 lines, or even 1000
// BUT if errors are found, no formatting can be done. in this case, after
// errors are reported, run the this->token-based linter (formatter).
// ----
// For C gen, new_Object() should be the only way to get a new instance.
// (new means initialized instance in the sense of objc, not op new in the
// sense of cpp which calls ctor later). Object_alloc() should not be called
// by anyone except new_Object(). Best is to not have Object_alloc() and
// Object_init() separately at all but directly in the new_Object() methods
// (which may be overloaded). The reason is performance: if parameters to
// new_Object are not as expected or something goes wrong e.g. a filename
// passed in doesn't exist then new can return NULL without doing any
// allocations etc. Separating alloc and init means allowing the user to do
// a wasteful alloc only for the init to fail later.

// --
// String library will mostly work on plain char* and ask for length
// where needed. The caller should compute length once (unless it was passed
// in already) and pass it into the string function. Functions that don't
// need the length will not have it as a parameter (all funcs have to check
// \0 anyway). this doesn't make buffer overflows any more likely: the
// length is generally computed by strlen which itself is problematic.
// Therefore whenever the length can be computed by other means (e.g. diff
// of two ptrs etc.) prefer that.
