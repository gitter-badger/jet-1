typedef enum { sliceByIndexes, sliceByRange, sliceByLogical } SliceMode;
typedef enum { sliceOfArray, sliceOfSlice, sliceDirect } SliceType;
struct GSliceN(T, N, I)
{
    union {
        T* ref;
        GSliceN(T, N, I) * sref;
        GArrayN(T, N, I) * aref;
    };
    uint(I) count; // alloc 0 means unowned
    // also knowing alloc is good for downward resize / subsequent regrow
    uint(I) dcount[N];
    SliceMode mode;
    SliceType type;
    struct {
        // NOPE they will be 16B inner
        union {
            struct {
                uint(I) start, stop, step;
            };
            struct {
                uint(I) * indexList;
                bool* logicalList;
                // uint(I) indexCount; dcount[] gives this
            };
        };

    } slicedim[N];
    // row-maj / col-maj, transposed, ...
};
